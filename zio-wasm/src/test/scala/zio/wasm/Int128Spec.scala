package zio.wasm

import zio.*
import zio.test.*

object Int128Spec extends ZIOSpecDefault {
  override def spec: Spec[Any, Any] =
    suite("Int128")(
      test("|") {
        binaryOp(
          "00000000 11111111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
          "00000000 00000010 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11111101 00000000",
          "00000000 11111111 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11111101 00000000",
          _ | _
        )
      },
      test("&") {
        binaryOp(
          "00000000 11111111 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
          "00000000 00000010 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11111101 00000000",
          "00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
          _ & _
        )
      },
      suite("<<")(
        test("#1") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            _ << _
          )
        },
        test("#2") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            _ << _
          )
        },
        test("#3") {
          binaryNOp(
            "00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            _ << _
          )
        },
        test("#4") {
          binaryNOp(
            "00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            77,
            "00000000 00000000 00000000 00000000 00000010 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
            _ << _
          )
        }
      ),
      suite(">>")(
        test("#1") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            _ >> _
          )
        },
        test("#2") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            _ >> _
          )
        },
        test("#3") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000",
            _ >> _
          )
        },
        test("#4") {
          binaryNOp(
            "10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000",
            17,
            "11111111 11111111 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000",
            _ >> _
          )
        },
        test("#5") {
          binaryNOp(
            "00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            77,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011000 00000000 00000000 00000000 00000000 00000000",
            _ >> _
          )
        },
        test("#6") {
          binaryNOp(
            "10000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            77,
            "11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111100 00011000 00000000 00000000 00000000 00000000 00000000",
            _ >> _
          )
        }
      ),
      suite(">>>")(
        test("#1") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            _ >>> _
          )
        },
        test("#2") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            _ >>> _
          )
        },
        test("#3") {
          binaryNOp(
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000",
            17,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000",
            _ >>> _
          )
        },
        test("#4") {
          binaryNOp(
            "10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000 00000000 00000000 00000000 00000000 00000000 00101000 00000000",
            17,
            "00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000",
            _ >>> _
          )
        },
        test("#5") {
          binaryNOp(
            "00000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            77,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011000 00000000 00000000 00000000 00000000 00000000",
            _ >>> _
          )
        },
        test("#6") {
          binaryNOp(
            "10000011 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 00000000 00000000 00000000 00000000 00000000 00010100 00000000",
            77,
            "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00011000 00000000 00000000 00000000 00000000 00000000",
            _ >>> _
          )
        }
      )
    )

  private def binaryOp(
    bin1: String,
    bin2: String,
    expected: String,
    op: (Int128, Int128) => Int128
  ) = {
    val bin1f     = bin1.filterNot(_.isWhitespace)
    val bin2f     = bin2.filterNot(_.isWhitespace)
    val expectedf = expected.filterNot(_.isWhitespace)
    if (bin1f.length != 128 || bin2f.length != 128 || expectedf.length != 128)
      failed(Cause.fail(new IllegalArgumentException("binary strings must be 128 bits long")))
    else
      ZIO.attempt {
        val i1h = java.lang.Long.parseUnsignedLong(bin1f.take(64), 2)
        val i1l = java.lang.Long.parseUnsignedLong(bin1f.drop(64), 2)
        val i2h = java.lang.Long.parseUnsignedLong(bin2f.take(64), 2)
        val i2l = java.lang.Long.parseUnsignedLong(bin2f.drop(64), 2)
        val i1  = Int128(i1h, i1l)
        val i2  = Int128(i2h, i2l)
        val r   = op(i1, i2)
        val ieh = java.lang.Long.parseUnsignedLong(expectedf.take(64), 2)
        val iel = java.lang.Long.parseUnsignedLong(expectedf.drop(64), 2)
        val ie  = Int128(ieh, iel)
        assertTrue(r == ie) ??
          s"${r.toBinaryString} !=\n  ${ie.toBinaryString}"
      }
  }

  private def binaryNOp(
    bin1: String,
    n: Int,
    expected: String,
    op: (Int128, Int) => Int128
  ) = {
    val bin1f     = bin1.filterNot(_.isWhitespace)
    val expectedf = expected.filterNot(_.isWhitespace)
    if (bin1f.length != 128 || expectedf.length != 128)
      failed(Cause.fail(new IllegalArgumentException("binary strings must be 128 bits long")))
    else
      ZIO.attempt {
        val i1h = java.lang.Long.parseUnsignedLong(bin1f.take(64), 2)
        val i1l = java.lang.Long.parseUnsignedLong(bin1f.drop(64), 2)
        val i1  = Int128(i1h, i1l)
        val r   = op(i1, n)
        val ieh = java.lang.Long.parseUnsignedLong(expectedf.take(64), 2)
        val iel = java.lang.Long.parseUnsignedLong(expectedf.drop(64), 2)
        val ie  = Int128(ieh, iel)
        assertTrue(r == ie) ??
          s"${r.toBinaryString} !=\n  ${ie.toBinaryString}"
      }
  }
}
